/**
 * Created by en20 on 2020/4/8.
 */
import {
    sleep
} from './utils'
import {
    saveDir
} from './tiebaSpider'

//依赖模块
const fs = require('fs')
const path = require('path')
const request = require('request')
const cheerio = require('cheerio')
const mkdirp = require('mkdirp')
const async = require('async')
const md5 = require('md5')
// console.log(
//     md5('123456')
// )

export const downloadByBannerCode = (browser, code) => new Promise(async(resolve, reject) => {
    try {
        const page = await browser.newPage()
        await page.goto('https://bannerlord.party/banner/')

        const elementHandle = await page.$('#code')
        elementHandle.focus()

        await page.keyboard.down('ControlLeft')

        await page.keyboard.press('A')

        await page.keyboard.up('ControlLeft')

        await page.keyboard.press('Backspace')

        await elementHandle.type(code)

        await elementHandle.press('Enter')

        // 复杂的图生成特别慢,等待2s
        await sleep(2000)

        // 不带到前台 base64 就只能取到空
        // await page.bringToFront()

        // 下载按钮
        // const downloadElement = await page.$('#download-image')
        // await downloadElement.click()

        // page.evaluate 执行不能把参赋值给外部??
        let base64 = ''
        base64 = await page.evaluate(sel => {
            const elements = document.querySelectorAll(sel)
            for (let i = 0; i < elements.length; i ++) {
                elements[i].parentNode.removeChild(elements[i])
            }

            return $('.render canvas')[0].toDataURL('image/png')
        }, '.ghost')

        // 图片路径
        const imgPath = `./${ saveDir }/${ md5(code) }.png`
        // 如果有 canvas 数据
        if (base64.length) {
            const base64Data = base64.replace(/^data:image\/\w+;base64,/, '')

            // console.log('base64Data: ',base64Data)

            const dataBuffer = new Buffer(base64Data, 'base64')

            fs.writeFile(imgPath, dataBuffer, err => {
                if (err) {
                    // console.log('图片保存失败')
                    reject(err)
                } else {
                    // console.log('图片保存成功')
                }
            })
        } else {
            // 截图
            const canvasElement = await page.$('.render canvas')
            await canvasElement.screenshot({
                // encoding: 'base64',
                path: imgPath,
            })
        }

        await page.close()

        resolve(imgPath)
    } catch (e) {
        reject(e)
    }
})
const arr = ['11.13.40.1536.1536.768.768.1.0.0.503.138.40.740.740.768.768.0.0.0.505.40.40.2000.150.768.768.0.0.40.505.40.40.2000.150.768.768.0.0.135.505.40.40.1536.25.768.708.0.0.0.505.40.40.1536.25.828.768.0.0.90.505.40.40.1536.25.768.828.0.0.0.505.40.40.1536.25.708.768.0.0.90.505.83.40.1536.100.768.768.0.0.90.505.83.40.1536.100.768.768.0.0.0', '11.35.128.1836.1836.768.788.1.0.-30.510.83.128.1458.751.780.388.1.0.0.510.83.128.1568.400.766.526.1.0.0.510.83.128.1626.400.782.629.1.0.0.510.83.128.1546.435.790.739.1.0.0.510.83.128.1552.400.768.853.1.0.0.510.83.128.1560.400.762.964.1.0.0.510.83.128.1576.400.756.1072.1.0.0.505.12.12.1129.616.133.463.1.0.0.516.127.12.40.40.635.419.1.0.0.516.127.12.40.40.519.419.1.0.0.516.127.12.40.40.420.419.1.0.0.516.127.12.40.40.312.419.1.0.0.516.127.12.40.40.210.419.1.0.0.516.127.12.40.40.116.419.1.0.0.516.127.12.40.40.116.488.1.0.0.516.127.12.40.40.116.560.1.0.0.516.127.12.40.40.116.637.1.0.0.516.127.12.40.40.116.717.1.0.0.516.127.12.40.40.162.449.1.0.0.516.127.12.40.40.162.521.1.0.0.516.127.12.40.40.162.594.1.0.0.516.127.12.40.40.162.679.1.0.0.516.127.12.40.40.210.488.1.0.0.516.127.12.40.40.210.560.1.0.0.516.127.12.40.40.210.637.1.0.0.516.127.12.40.40.210.717.1.0.0.516.127.12.40.40.312.488.1.0.0.516.127.12.40.40.312.560.1.0.0.516.127.12.40.40.312.637.1.0.0.516.127.12.40.40.312.717.1.0.0.516.127.12.40.40.420.488.1.0.0.516.127.12.40.40.420.560.1.0.0.516.127.12.40.40.420.637.1.0.0.516.127.12.40.40.420.717.1.0.0.516.127.12.40.40.524.488.1.0.0.516.127.12.40.40.524.560.1.0.0.516.127.12.40.40.524.637.1.0.0.516.127.12.40.40.524.717.1.0.0.516.127.12.40.40.635.488.1.0.0.516.127.12.40.40.635.560.1.0.0.516.127.12.40.40.635.637.1.0.0.516.127.12.40.40.635.717.1.0.0.516.127.12.40.40.259.449.1.0.0.516.127.12.40.40.364.449.1.0.0.516.127.12.40.40.470.449.1.0.0.516.127.12.40.40.578.449.1.0.0.516.127.12.40.40.259.521.1.0.0.516.127.12.40.40.259.594.1.0.0.516.127.12.40.40.259.679.1.0.0.516.127.12.40.40.364.521.1.0.0.516.127.12.40.40.364.594.1.0.0.516.127.12.40.40.364.679.1.0.0.516.127.12.40.40.470.521.1.0.0.516.127.12.40.40.470.594.1.0.0.516.127.12.40.40.470.679.1.0.0.516.127.12.40.40.578.521.1.0.0.516.127.12.40.40.578.594.1.0.0.516.127.12.40.40.578.679.1.0.0', '27.12.128.1500.1500.768.733.1.0.0.510.12.12.2013.8000.768.768.1.0.0.510.128.128.2013.700.768.738.1.0.25.510.128.128.2013.700.768.738.1.0.335.510.142.142.1200.235.1351.447.1.0.25.510.142.142.1200.235.139.1046.1.0.25.510.142.142.1200.235.201.488.1.0.335.510.142.142.1200.235.1439.1032.1.0.335.510.128.128.1800.1200.768.738.1.0.0.510.128.128.1200.1200.768.738.1.0.90.510.142.142.1200.750.768.738.1.0.90.510.142.142.2013.750.768.738.1.0.0', '11.68.48.1836.1836.768.788.1.0.-30.527.84.84.339.364.784.784.1.1.-75.505.48.48.228.247.596.736.1.1.-64.503.84.84.73.70.608.896.1.1.-64.510.84.84.363.356.844.824.1.1.-48.510.84.84.109.488.694.692.1.1.42.510.84.84.99.245.746.672.1.1.42.510.84.84.65.205.734.636.1.1.15.510.84.84.50.194.768.642.1.1.133.505.84.84.50.100.726.668.1.1.133']

